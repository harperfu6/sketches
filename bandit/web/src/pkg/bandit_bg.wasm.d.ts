/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export function __wbg_annealingepsilongreedy_free(a: number): void;
export function __wbg_get_annealingepsilongreedy_epsilon(a: number): number;
export function __wbg_set_annealingepsilongreedy_epsilon(a: number, b: number): void;
export function annealingepsilongreedy_new(a: number): number;
export function annealingepsilongreedy_name(a: number, b: number): void;
export function annealingepsilongreedy_reset(a: number, b: number): void;
export function annealingepsilongreedy_select_arm(a: number): number;
export function annealingepsilongreedy_update(a: number, b: number, c: number): void;
export function __wbg_annealingsoftmax_free(a: number): void;
export function annealingsoftmax_new(a: number): number;
export function annealingsoftmax_name(a: number, b: number): void;
export function annealingsoftmax_reset(a: number, b: number): void;
export function annealingsoftmax_select_arm(a: number): number;
export function annealingsoftmax_update(a: number, b: number, c: number): void;
export function __wbg_softmax_free(a: number): void;
export function softmax_new(a: number): number;
export function softmax_name(a: number, b: number): void;
export function softmax_reset(a: number, b: number): void;
export function softmax_select_arm(a: number): number;
export function softmax_update(a: number, b: number, c: number): void;
export function __wbg_epsilongreedy_free(a: number): void;
export function epsilongreedy_new(a: number, b: number): number;
export function epsilongreedy_call_reset(a: number, b: number): void;
export function epsilongreedy_call_select_arm(a: number): number;
export function epsilongreedy_call_update(a: number, b: number, c: number): void;
export function __wbg_random_free(a: number): void;
export function random_new(a: number): number;
export function random_name(a: number, b: number): void;
export function random_select_arm(a: number): number;
export function random_reset(a: number, b: number): void;
export function random_update(a: number, b: number, c: number): void;
export function __wbindgen_add_to_stack_pointer(a: number): number;
export function __wbindgen_free(a: number, b: number): void;
export function __wbindgen_exn_store(a: number): void;
